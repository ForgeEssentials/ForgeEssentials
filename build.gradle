buildscript {
    repositories {
        maven {
            name = "forge"
            url = "http://files.minecraftforge.net/maven"
        }
        maven {
            name = "sonatype"
            url = "https://oss.sonatype.org/content/repositories/releases/"
        }
        mavenCentral()

        maven {
            name = "sonatype"
            url = "https://oss.sonatype.org/content/repositories/snapshots/"
        }

    }
    dependencies { classpath 'net.minecraftforge.gradle:ForgeGradle:1.2-SNAPSHOT' }

}

apply plugin: 'forge'

version = "1.3.1-beta1"
group = "com.forgeessentials"
archivesBaseName = "forgeessentials"
sourceCompatibility = 1.7
targetCompatibility = 1.7

minecraft {
    version = "1.7.10-10.13.1.1219"
    assetDir = "rundir/assets"
    ext.forgeVersion = "10.13.1.1219"

    replaceIn "com/forgeessentials/core/preloader/FEModContainer.java"
    replaceIn "com/forgeessentials/client/ForgeEssentialsClient.java"
    replace "%VERSION%", project.version
}

configurations {
    serverLibs
    modules
}

repositories {
    mavenLocal()
    maven {
        name = "sk89q"
        url = "http://maven.sk89q.com/repo/"
    }
}

dependencies {

    compile 'org.pircbotx:pircbotx:1.9' //chat - irc stuff

    //datasaving
    compile 'com.h2database:h2:1.3.175'
    compile 'mysql:mysql-connector-java:5.1.22'

    // just for shits and giggles
    compile "org.projectlombok:lombok:1.14.6"

    // WE integration -
    compile 'com.sk89q:worldedit:6.0.0-SNAPSHOT'// use BOTH
    //compile files('lib/worldedit-forge-6.0.0-SNAPSHOT-deobf.jar')

    serverLibs 'org.pircbotx:pircbotx:1.9'
    serverLibs 'com.h2database:h2:1.3.175'
    serverLibs 'mysql:mysql-connector-java:5.1.22'
    serverLibs files('lib/minecraftforge-10.13.0.0-permsAPIonly.jar')
}

jar {
    from project.sourceSets.main.output
    include "com/forgeessentials/core/**"
    include "com/forgeessentials/util/**"
    include "com/forgeessentials/data/**"
    include "com/forgeessentials/api/**"
    include "com/forgeessentials/permissions/**"
    include "org/mcstats/**"
    include "logo.png"
    include "mcmod.info"
    include "forgeessentials_at.cfg"
    appendix = project.minecraft.version
    manifest {
        attributes("FMLCorePlugin": "com.forgeessentials.core.preloader.FEPreLoader", "FMLCorePluginContainsFMLMod": "true")
    }
}

javadoc {
    include "com/forgeessentials/api/**"
}

sourceSets {
    client {
        compileClasspath = project.sourceSets.main.compileClasspath
    }

/*
    weintegration {
        compileClasspath = files(project.configurations.compile, project.tasks.jar.getArchivePath())

    }
    */
}


processClientResources {
    from(sourceSets.main.resources.srcDirs) {
        expand 'version': project.version, 'mcversion': project.minecraft.version, 'forgeversion': project.minecraft.forgeVersion
        include 'mcmod.info'
    }
}

processResources {
    from(sourceSets.main.resources.srcDirs) {
        expand 'version': project.version, 'mcversion': project.minecraft.version, 'forgeVersion': project.minecraft.forgeVersion
        include 'mcmod.info'
    }
}

//server complete
task completeZip(type: Zip, dependsOn: 'reobf') {
    classifier = 'server'
    destinationDir = jar.destinationDir
    from(project.tasks.jar.getArchivePath()) { into 'mods' }

    from(sourceSets.main.output) { include 'FEReadme.txt' }
    from(project.configurations.serverLibs) {
        include '*'
        into('ForgeEssentials/lib')
    }
    appendix = project.minecraft.version
}


task cleanModules(dependsOn: "completeZip", type: Delete) {
}


def list = [
        'auth',
        'backup',
        'chat',
        'commands',
        'economy',
        'playerlogger',
        'protection',
        'questioner',
        'snooper',
        'servervote',
        'scripting',
        'tickets',
        'worldborder',
        'afterlife',
        'teleport',
]

list.each { name ->
    def taskName = name + "Jar"
    def newTask = project.tasks.create(name: taskName, dependsOn: "jar", type: Jar) {
        from sourceSets.main.output
        classifier = name
        appendix = project.minecraft.version
        include "com/forgeessentials/$name/**"
    }

    reobf {
        reobf(newTask) { reobfSpec ->
            reobfSpec.classpath = files(project.configurations.compile, project.tasks.jar.getArchivePath())
        }
    }

    artifacts {
        modules newTask
    }

    project.tasks.completeZip {
        from(newTask.getArchivePath()) { into 'ForgeEssentials/modules' }
        dependsOn newTask
    }

    project.tasks.cleanModules {
        delete(newTask.getArchivePath())
    }
}

//client
task clientJar(dependsOn: "jar", type: Jar) {
    from sourceSets.client.output
    classifier = "client"
    appendix = project.minecraft.version
    include "**"
}

//worldedit
/*
task weJar(dependsOn: "jar", type: Jar) {
    weJar.mustRunAfter jar
    from sourceSets.weintegration.output
    classifier = "weintegrationtools"
    appendix = project.minecraft.version
    include "**"
}
*/

//core DEOBF use for development
task devDeobfJar(dependsOn: "jar", type: Jar) {
    from project.sourceSets.main.output
    include "**"

    from project.sourceSets.api.output
    include "**"

    manifest {
        attributes("FMLCorePlugin": "com.forgeessentials.core.preloader.FEPreLoader", "FMLCorePluginContainsFMLMod": "true")
    }
    classifier = "deobf"
    appendix = project.minecraft.version
}

task sourceJar(type: Jar) {
    from sourceSets.main.allSource
    include "com/forgeessentials/api/**"
    classifier = 'sources'
    appendix = project.minecraft.version
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    from javadoc.destinationDir
    classifier = 'javadoc'
    appendix = project.minecraft.version
}

reobf {
    /*
    reobf(weJar) { reobfSpec ->
        reobfSpec.classpath = files(project.configurations.compile, project.tasks.jar.getArchivePath())
    }
    */
    reobf(clientJar) { reobfSpec ->
        reobfSpec.classpath = project.sourceSets.main.compileClasspath
    }
}



artifacts {
    archives clientJar
    //archives weJar
    archives devDeobfJar
    archives javadocJar
    archives sourceJar
}

build.dependsOn "cleanModules"

task wrapper(type: Wrapper) {
    gradleVersion = '2.0'
}

