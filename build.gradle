// Build repositories
buildscript {
	repositories {
		maven {
			name = "forge"
			url = "https://files.minecraftforge.net/maven"
		}
		maven {
			// GTNH ForgeGradle
			name = "GTNH Maven"
			url = "http://jenkins.usrv.eu:8081/nexus/content/groups/public/"
		}
		maven {
			name = "sonatype"
			url = "https://oss.sonatype.org/content/repositories/releases/"
		}
		mavenCentral()
		mavenLocal()
		maven {
			name = "sonatype"
			url = "https://oss.sonatype.org/content/repositories/snapshots/"
		}
		maven {
      		url = uri("https://plugins.gradle.org/m2/")
    	}
		jcenter()

	}
	dependencies {
		classpath "net.minecraftforge.gradle:ForgeGradle:1.2.13"
		classpath "org.jfrog.buildinfo:build-info-extractor-gradle:3.0.1"
		classpath "org.ajoberstar:gradle-git:0.12.0"
		classpath("com.modrinth.minotaur:Minotaur:2.8.3")
	}

}
plugins {
	id 'com.github.johnrengelman.shadow' version '4.0.2'
    id "com.matthewprenger.cursegradle" version "1.4.0"
}

// Set up FE required repositories
repositories {
	maven {
		name = "sk89q"
		url = "https://maven.enginehub.org/repo/"
	}
	maven {
		name = "sponge"
		url = "https://repo.spongepowered.org/maven/"
	}
}

apply plugin: "forge"
/************************************************************
 * General configuration
 */

// Get buildNumber from environment variable
ext.buildNumber = "0"
if (System.getenv("BUILD_NUMBER") != null) {
	buildNumber = System.getenv("BUILD_NUMBER")

}

ext.set 'changelog', System.getenv("CHANGE_LOG")
ext.set 'releaseType', 'release'

// Get commit hash
import org.ajoberstar.grgit.Grgit
def repo = Grgit.open(project.file("."))
ext.gitCommitHash = repo.log().find().abbreviatedId

// Set build properties
ext.baseVersion = "7.5"
ext.projectID=74735
ext.clientProjectID=235928
version = baseVersion + "." + buildNumber
group = "com.forgeessentials"
archivesBaseName = "forgeessentials"
sourceCompatibility = 1.8
targetCompatibility = 1.8
ext.set 'srcFile',file("./tmp/$archivesBaseName-$minecraft.version-$baseVersion.$buildNumber-server.jar")
ext.set 'clientSrcFile',file("./tmp/$archivesBaseName-$minecraft.version-$baseVersion.$buildNumber-client.jar")

curseforge {
    apiKey = System.getenv("CF_APIKEY")
    if (apiKey) {
        project {
            id = projectID
            changelog = project.changelog + "\n\nNote: Java 17+ requires another mod (lwjgl3ify) to bootstrap Forge."
            releaseType = project.releaseType
            addGameVersion minecraft.version
            addGameVersion 'Forge'
            addGameVersion 'Java 17'
            addGameVersion 'Java 8'

            mainArtifact(project.srcFile) {
                displayName = "$archivesBaseName-$minecraft.version-$baseVersion.$buildNumber"
                relations {
                    optionalDependency 'baubles'
                }
            }
        }
        project {
            id = clientProjectID
            changelog = project.changelog
            releaseType = project.releaseType
            addGameVersion minecraft.version
            addGameVersion 'Forge'
            addGameVersion 'Java 8'

            mainArtifact(project.clientSrcFile) {
                displayName = "$archivesBaseName-$minecraft.version-$baseVersion.$buildNumber"
                relations {
                    tool('forge-essentials')
                }
            }
        }
    }
    options {
        javaVersionAutoDetect = false
        forgeGradleIntegration = false
        javaIntegration = false
    }
}

project.afterEvaluate {
    def task = tasks.findByPath("curseforge$projectID")
    task?.dependsOn = []
    task = tasks.findByPath("curseforge$clientProjectID")
    task?.dependsOn = []
}

// Set up forge options
minecraft {
	version = "1.7.10-10.13.4.1558-1.7.10"
	runDir = "rundir"

	replaceIn "src/utils/java/com/forgeessentials/commons/BuildInfo.java"
	replace "_VERSION_", project.version
}

apply plugin: "com.modrinth.minotaur"

// Configure shared manifest
ext.sharedManifest = manifest {
	attributes (
		"BuildID": gitCommitHash,
		"BuildNumber": buildNumber,
		"FMLCorePluginContainsFMLMod": "true",
		"ForceLoadAsMod": "true",
        "MixinCompatibilityLevel": "JAVA_8",
	)
}

ext.serverManifest = manifest {
	from sharedManifest
	attributes (
		"TweakClass": "com.forgeessentials.core.preloader.FELaunchHandler",
		"TweakOrder": "0",
		"MixinConfigs": "mixins.forgeessentials.json,mixins.forgeessentials-opt.json",
		"FMLAT": "forgeessentials_at.cfg",
	)
}

/************************************************************
 * Dependency configuration
 */

// Create dependency configurations
configurations {
	includeMod
	shade
	shadeClient
	serverLib
	buildDep
	shadowLib
	compile.extendsFrom buildDep, shade, shadeClient, serverLib, shadowLib
}
// def jdkHome = System.getenv("JAVA_HOME")

// Configure dependencies (build-only, shaded and packed libraries)
dependencies {
	// IRC
	serverLib("org.pircbotx:pircbotx:2.0.1") {
        // these are all packaged with the minecraft server jar
        exclude module: 'guava'
        exclude module: 'commons-lang3'
        exclude module: 'commons-codec'
    }

	serverLib('net.dv8tion:JDA:5.0.0-beta.8')
	// Database libraries	
	shadowLib group: 'com.h2database', 	name: 'h2', 					version: '1.3.175'
	serverLib group: 'mysql', 			name: 'mysql-connector-java', 	version: '5.1.22'
	shadowLib group: 'org.hibernate', 	name: 'hibernate-core', 		version: '5.2.2.Final'
	implementation 'javax.persistence:javax.persistence-api:2.2'
	annotationProcessor group: 'org.hibernate', 	name: 'hibernate-jpamodelgen', 	version: '5.6.14.Final'
	annotationProcessor 'org.spongepowered:mixin:0.8.5:processor'
	/* serverLib "org.eclipse.persistence:eclipselink:2.6.0" */
	
	// WorldEdit
	buildDep group: "com.sk89q.worldedit", name: "worldedit-forge-mc1.7.10", version: "6.1.1-SNAPSHOT", classifier: "dev", changing: true
	buildDep files('lib/Baubles-1.7.10-1.0.1.10-deobf.jar')
	includeMod files("lib/worldedit-forge-mc1.7.10-6.1.1-SNAPSHOT-dist.jar")

	// Shade Mixin library
	shade (group: "org.spongepowered", name: "mixin", version: "0.7.11-SNAPSHOT", changing: true) {
        exclude group: 'org.ow2.asm', module: 'asm-tree'
        exclude module: 'launchwrapper'
        exclude module: 'guava'
        exclude module: 'gson'
        exclude module: 'commons-io'
        exclude module: 'log4j-core'
    }
	shadeClient (group: "org.spongepowered", name: "mixin", version: "0.7.11-SNAPSHOT", changing: true) {
        exclude group: 'org.ow2.asm', module: 'asm-tree'
        exclude module: 'launchwrapper'
        exclude module: 'guava'
        exclude module: 'gson'
        exclude module: 'commons-io'
        exclude module: 'log4j-core'
    }
	
	// TOOLS.jar from jdk for javadoc support
    // compile files("$jdkHome/lib/tools.jar")
    compile files(System.getenv("JAVA_HOME") + "/lib/tools.jar")
}

/************************************************************
 * Configure source sets (e.g., src/main)
 */

sourceSets {
	utils {
		compileClasspath = files(configurations.compile, sourceSets.api.output)
	}
	main {
		compileClasspath = files(configurations.compile, sourceSets.api.output, sourceSets.utils.output)
		ext.refMap = "mixins.forgeessentials.refmap.json"
	}
	client {
		compileClasspath = files(configurations.compile, sourceSets.api.output, sourceSets.utils.output)
		ext.refMap = "mixins.forgeessentials.client.refmap.json"
	}

	test {
		compileClasspath = files(configurations.compile, sourceSets.api.output, sourceSets.utils.output, sourceSets.main.output)
	}
}

// Configure server resource processing
project.processResources {
	from (sourceSets.main.resources.srcDirs) {
		include "META-INF/persistence.xml"
		filter {
			line ->
				line.replaceAll('org.hibernate','com.forgeessentials.thirdparty.org.hibernate').replaceAll('org.h2', 'com.forgeessentials.thirdparty.org.h2')
		}
	}
	from (sourceSets.main.resources.srcDirs) {
		include "mcmod.info"
		expand (
			"version": project.version, 
			"mcversion": project.minecraft.version,
		)
	}
}

// Configure client resource processing
project.processClientResources {
	from (sourceSets.client.resources.srcDirs) {
		include "mcmod.info"
		expand (
			"version": project.version, 
			"mcversion": project.minecraft.version,
		)
	}
}

/************************************************************
 * Configure server jar (default)
 */

 // Javadoc task for generating tsd - does not work yet
task tsd(type: JavaExec) {
	dependsOn "classes"
	classpath = project.sourceSets.test.compileClasspath
	main = "com.forgeessentials.jscripting.TsdGenerator"
	doLast {
		copy {
			from files("jscripting/") {
				include "*.d.ts"
			}
			into "build/resources/main/com/forgeessentials/jscripting"
		}
	}
}
 
// Pack libraries as zip file to include them in the jar file
task serverLibArchive(type: Zip) {
	archiveName = "libraries.zip"
	destinationDir = jar.destinationDir

	from (configurations.serverLib.copyRecursive()) { into("ForgeEssentials/lib") }
	from (configurations.includeMod) { into("mods") }
}

jar.doLast {
	delete (serverLibArchive.archivePath)
	delete (shadowJar.archivePath)
}

def serverRefMap = "${tasks.compileJava.temporaryDir}" + File.separator + "mixins.forgeessentials.refmap.json"
def clientRefMap = "${tasks.compileClientJava.temporaryDir}" + File.separator + "mixins.forgeessentials.client.refmap.json"

shadowJar {
	relocate  'org.jboss','com.forgeessentials.thirdparty.org.jboss'
	relocate  'org.hibernate','com.forgeessentials.thirdparty.org.hibernate'
	relocate  'org.h2','com.forgeessentials.thirdparty.org.h2'
	relocate  'org.dom4j','com.forgeessentials.thirdparty.org.dom4j'
	relocate  'javax.persistence','com.forgeessentials.thirdparty.javax.persistence'
	relocate  'javax.transaction','com.forgeessentials.thirdparty.javax.transaction'
	relocate  'javax.interceptor','com.forgeessentials.thirdparty.javax.interceptor'
	relocate  'javax.inject','com.forgeessentials.thirdparty.javax.inject'
	relocate  'javax.enterprise','com.forgeessentials.thirdparty.javax.enterprise'
	relocate  'javax.el','com.forgeessentials.thirdparty.javax.el'
	relocate  'javax.decorator','com.forgeessentials.thirdparty.javax.decorator'
	relocate  'javax.annotation','com.forgeessentials.thirdparty.javax.annotation'
	relocate  'javassist','com.forgeessentials.thirdparty.javassist'
	relocate  'antlr','com.forgeessentials.thirdparty.antlr'
	relocate  'com.fasterxml','com.forgeessentials.thirdparty.com.fasterxml'
	configurations = [project.configurations.shadowLib]
	classifier = "shadow"

	from sourceSets.main.output
	from sourceSets.utils.output
	exclude('com/forgeessentials/client/**')
}
// Configure server jar (default)
jar {
	dependsOn "serverLibArchive"
	dependsOn shadowJar
	classifier = "server"
	appendix = minecraft.version

	from sourceSets.main.output
	from sourceSets.utils.output
    exclude('com/forgeessentials/client/**')
    from fileTree(serverLibArchive.archivePath)
	configurations.shade.copyRecursive().setTransitive(false).each { artifact ->
		from (zipTree(artifact)) {
			exclude 'META-INF/*.SF'
			exclude 'META-INF/*.RSA'
			exclude 'META-INF/*.MF'
			exclude 'LICENSE.txt'
		}
	}
	from (zipTree(shadowJar.archivePath)) {
		exclude 'META-INF','META-INF/**'
	}

	from (zipTree(shadowJar.archivePath)) {
		include 'META-INF/services/*'
		filter {
			line -> line.replaceAll('org.hibernate','com.forgeessentials.thirdparty.org.hibernate')
		}
		rename {
			name -> "com.forgeessentials.thirdparty.$name"
		}
	}

    from serverRefMap

	manifest {
		from serverManifest
	}
}

/************************************************************
 * Configure client jar
 */

task clientJar (dependsOn: "clientClasses", type: Jar) {
	classifier = "client"
	appendix = minecraft.version
	
	from sourceSets.client.output
	from sourceSets.utils.output
    from clientRefMap
	configurations.shadeClient.copyRecursive().setTransitive(false).each { artifact ->
		from (zipTree(artifact))
	}
	
	manifest {
		from sharedManifest
		attributes (
			"MixinConfigs": "mixins.forgeessentials.client.json",
            "TweakClass": "org.spongepowered.asm.launch.MixinTweaker",
		)
	}
}

/************************************************************
 * Deobfuscated server jar
 * Dependency name for maven = com.forgeessentials:forgeessentials:<version>:
 */

task deobfJar(dependsOn: "classes", type: Jar) {
	classifier = "dev"
	appendix = minecraft.version
	
	from sourceSets.main.output
	from sourceSets.utils.output
	
	from (sourceSets.main.java) {
		into ("src/")
	}

	manifest {
		from serverManifest
	}
}

/************************************************************
 * Configure Mixin tweaks 
 */

task sourceJar(type: Jar) {
	classifier = "sources"
	appendix = minecraft.version
	
	from sourceSets.main.allSource
	
	manifest {
		from serverManifest
	}
}

/************************************************************
 * Configure API javadoc
 */

javadoc {
	include "com/forgeessentials/api/**"
	classpath = sourceSets.main.compileClasspath + sourceSets.main.output
	options.addBooleanOption("Xdoclint:reference,accessibility,html", true) // excluded: syntax, missing
}

task javadocJar(type: Jar, dependsOn: javadoc) {
	classifier = "javadoc"
	appendix = project.minecraft.version
	
	from javadoc.destinationDir
	
	manifest { from sharedManifest }
}

/************************************************************
 * Configure reobfuscation
 */

def mixinSrg = "${tasks.reobf.temporaryDir}" + File.separator + "mixins.srg"
//def mixinClientSrg = "${tasks.reobf.temporaryDir}" + File.separator + "mixinsClient.srg"
afterEvaluate {
	tasks.compileJava.options.compilerArgs += ["-AreobfSrgFile=${tasks.reobf.srg}", "-AoutSrgFile=${mixinSrg}", "-AoutRefMapFile=${serverRefMap}"]
	//tasks.compileClientJava.options.compilerArgs += ["-AreobfSrgFile=${tasks.reobf.srg}", "-AoutSrgFile=${mixinClientSrg}", "-AoutRefMapFile=${clientRefMap}"]
}

reobf {
	addExtraSrgFile mixinSrg
	//addExtraSrgFile mixinClientSrg
	reobf (clientJar) { reobfSpec ->
		reobfSpec.classpath = sourceSets.main.compileClasspath
	}
}

/************************************************************
 * Configure Annotations for IDEs Jar
 */

// util.jar
task Annotations(type: Jar) {
	classifier = "annotations"
	appendix = project.minecraft.version
	
    from(sourceSets.main.output) {
        include "com/forgeessentials/playerlogger/entity/**"
        exclude "com/forgeessentials/playerlogger/entity/Action.class"
        exclude "com/forgeessentials/playerlogger/entity/Action01Block\$ActionBlockType.class"
        exclude "com/forgeessentials/playerlogger/entity/Action01Block.class"
        exclude "com/forgeessentials/playerlogger/entity/Action02Command.class"
        exclude "com/forgeessentials/playerlogger/entity/Action03PlayerEvent\$PlayerEventType.class"
        exclude "com/forgeessentials/playerlogger/entity/Action03PlayerEvent.class"
        exclude "com/forgeessentials/playerlogger/entity/Action04PlayerPosition.class"
        exclude "com/forgeessentials/playerlogger/entity/BlockData.class"
        exclude "com/forgeessentials/playerlogger/entity/PlayerData.class"
        exclude "com/forgeessentials/playerlogger/entity/WorldData.class"
        
        doLast {
        delete fileTree(dir:'misc', include: '**annotations.jar')
        copy {
            from files("build/libs/") {
                include "**annotations.jar"
            }
            into "misc"
            rename 'forgeessentials-'+project.minecraft.version+"-"+project.version+'-annotations.jar', 'forgeessentials-'+project.minecraft.version+'-annotations.jar'
        }
        delete fileTree(dir:'build/libs/', include: '**annotations.jar')
        }
    }  
}

/************************************************************
 * Others
 */

// Add default artifacts for task "build"
artifacts {
	archives deobfJar
	archives clientJar
	archives Annotations
}

/************************************************************
 * Configure maven publishing
 */

apply plugin: "maven-publish"

publishing {
	tasks.publish.dependsOn "deobfJar"

	publications {
		mavenJava (MavenPublication) {
			groupId "com.forgeessentials"
			artifactId "forgeessentials"
			version baseVersion + "-SNAPSHOT"
			if (System.getenv("PUBLISH_RELEASE"))
				version baseVersion

			artifact deobfJar
			artifact sourceJar
			artifact javadocJar

			pom.withXml {
				def dependenciesNode = asNode().appendNode("dependencies")
				def allDeps = configurations.buildDep.allDependencies + 
					configurations.serverLib.allDependencies + 
					configurations.shade.allDependencies
				allDeps.each {
					def dependencyNode = dependenciesNode.appendNode("dependency")
					dependencyNode.appendNode("groupId", it.group)
					dependencyNode.appendNode("artifactId", it.name)
					dependencyNode.appendNode("version", it.version)
					if (it.group == "com.sk89q.worldedit") // Hack to get classifier for worldedit attached (bug https://issues.gradle.org/browse/GRADLE-3030)
						dependencyNode.appendNode("classifier", "dev")
				}
			}
		}
	}

	repositories {
		if (project.hasProperty("forgemaven_user") && project.hasProperty("forgemaven_password")) {
			maven {
				credentials {
					username project.forgemaven_user
					password project.forgemaven_password
				}
				url "https://files.minecraftforge.net/maven/manage/upload"
			}
		} else {
			maven { url "file://${project.projectDir}/build/repo" }
		}
	}
}

task publishAndClean(type: Delete, dependsOn: "publish") {
    delete javadocJar, sourceJar
}
