buildscript {
    repositories {
        jcenter()
        maven { url = 'http://files.minecraftforge.net/maven' }
        maven { url = 'http://repo.spongepowered.org/maven/' }
    }
    dependencies {
        classpath 'net.minecraftforge.gradle:ForgeGradle:2.3-SNAPSHOT'
        classpath 'org.jfrog.buildinfo:build-info-extractor-gradle:3.0.1'
        classpath 'org.ajoberstar:gradle-git:0.12.0'
        classpath 'org.spongepowered:mixingradle:0.6-SNAPSHOT'
    }
}

plugins {
    id 'org.spongepowered.plugin' version '0.6'
    id 'org.sonarqube' version '2.5'
}

apply plugin: 'net.minecraftforge.gradle.forge'
apply plugin: 'org.spongepowered.mixin'
apply plugin: 'jacoco'

/************************************************************
 * General configuration
 */

// Get buildNumber from environment variable
ext.buildNumber = "0"
if (System.getenv("BUILD_NUMBER") != null) {
    buildNumber = System.getenv("BUILD_NUMBER")
}

// Get commit hash
import org.ajoberstar.grgit.Grgit

def repo = Grgit.open(project.file("."))
ext.gitCommitHash = repo.log().find().abbreviatedId

// Set build properties
version = "$baseVersion.$buildNumber"
group = "com.forgeessentials"
archivesBaseName = "forgeessentials"
sourceCompatibility = 1.8
targetCompatibility = 1.8

// Set up forge options
minecraft {
    version = "$project.minecraftVersion-$project.forgeVersion"
    runDir = "rundir"

    mappings = "snapshot_20180304"

    replaceIn "src/utils/java/com/forgeessentials/commons/BuildInfo.java"
    replace(["_BASEVERSION_": baseVersion, "_MCVERSION_": project.minecraftVersion])
}

// Configure shared manifest
ext.sharedManifest = manifest {
    attributes(
            "BuildID": gitCommitHash,
            "BuildNumber": buildNumber,
            "FMLCorePluginContainsFMLMod": "true",
            "ForceLoadAsMod": "true",
            "MixinCompatibilityLevel": "JAVA_8",
    )
}

ext.serverManifest = manifest {
    from sharedManifest
    attributes(
            "TweakClass": "com.forgeessentials.core.preloader.FELaunchHandler",
            "TweakOrder": "0",
            "MixinConfigs": "mixins.forgeessentials.json",
            "FMLAT": "forgeessentials_at.cfg",
    )
}

/************************************************************
 * Dependency configuration
 */

configurations {
    shade
    serverLib
    includeMod
    compile.extendsFrom shade, serverLib, includeMod
}

repositories {
    maven { url = "http://maven.sk89q.com/repo/" }
}

dependencies {
    serverLib("org.pircbotx:pircbotx:2.0.1") {
        exclude module: 'guava'
        exclude module: 'commons-lang3'
        exclude module: 'commons-codec'
    }

    shade(group: 'org.spongepowered', name: 'mixin', version: '0.6.15-SNAPSHOT', changing: true) {
        exclude module: 'guava'
        exclude module: 'gson'
        exclude module: 'commons-io'
        exclude module: 'launchwrapper'
    }
    provided 'org.spongepowered:spongeapi:6.0.0'

    includeMod files('lib/worldedit-forge-mc1.12-6.1.8-dist.jar')
    compile files('lib/Baubles-1.12-1.5.2-deobf.jar')

    // Database libraries
    serverLib 'com.h2database:h2:1.3.175'
    serverLib 'mysql:mysql-connector-java:5.1.22'
    serverLib 'org.hibernate:hibernate-core:5.2.2.Final'
    compile 'org.hibernate:hibernate-jpamodelgen:5.2.2.Final'

    // TOOLS.jar from jdk for javadoc support
    provided files("c:/Program Files/Java/jdk1.8.0_152/lib/tools.jar")
    provided files(System.getenv("JAVA_HOME") + "/lib/tools.jar")
}

/************************************************************
 * Configure source sets (e.g., src/main)
 */

sourceSets {
    utils {
        compileClasspath += sourceSets.main.compileClasspath
    }
    client {
        compileClasspath += sourceSets.main.compileClasspath
        compileClasspath += sourceSets.utils.output
        ext.refMap = "mixins.forgeessentials.client.refmap.json"
    }
    main {
        compileClasspath += sourceSets.utils.output
        ext.refMap = "mixins.forgeessentials.refmap.json"
    }
}

processResources {
    from(sourceSets.main.resources.srcDirs) {
        include "mcmod.info"
        expand(
                "version": project.version,
                "mcversion": project.minecraft.version,
        )
    }
}

processClientResources {
    from(sourceSets.client.resources.srcDirs) {
        include "mcmod.info"
        expand(
                "version": project.version,
                "mcversion": project.minecraft.version,
        )
    }
}

/************************************************************
 * Configure server jar (default)
 */

// Pack libraries as zip file to include them in the jar file
task serverLibArchive(type: Zip) {
    archiveName = "libraries.zip"
    destinationDir = jar.destinationDir

    from(configurations.serverLib.copyRecursive()) { into("ForgeEssentials/lib") }
    from(configurations.includeMod) { into("mods") }
}

jar.doLast {
    delete(serverLibArchive.archivePath)
}

// Configure server jar (default)
jar {
    dependsOn "serverLibArchive"
    classifier = "server"
    appendix = minecraft.version

    from sourceSets.main.output
    from sourceSets.utils.output
    exclude('com/forgeessentials/client/**')
    from fileTree(serverLibArchive.archivePath)

    configurations.shade.copyRecursive().setTransitive(false).each { artifact ->
        from(zipTree(artifact))
    }

    // Remove signatures (spongepowered.mixin)
    exclude '**/META-INF/*.RSA'
    exclude '**/META-INF/*.SF'

    manifest {
        from serverManifest
    }
}

/************************************************************
 * Configure client jar
 */

task clientJar(dependsOn: "clientClasses", type: Jar) {
    classifier = "client"
    appendix = minecraft.version

    from sourceSets.client.output
    from sourceSets.utils.output
    configurations.shade.copyRecursive().setTransitive(false).each { artifact ->
        from(zipTree(artifact))
    }

    // Remove signatures (spongepowered.mixin)
    exclude '**/META-INF/*.RSA'
    exclude '**/META-INF/*.SF'

    manifest {
        from sharedManifest
        attributes(
                "MixinConfigs": "mixins.forgeessentials.client.json",
                "TweakClass": "org.spongepowered.asm.launch.MixinTweaker",
        )
    }
}

/************************************************************
 * Deobfuscated server jar
 * Dependency name for maven = com.forgeessentials:forgeessentials:<version>:
 * */

task deobfJar(dependsOn: "classes", type: Jar) {
    classifier = "dev"
    appendix = minecraft.version

    from sourceSets.main.output
    from sourceSets.utils.output

    from(sourceSets.main.java) {
        into("src/")
    }

    manifest {
        from serverManifest
    }
}
/*
task sourceJar(type: Jar) {
	classifier = "sources"
	appendix = minecraft.version
	
	from sourceSets.main.allSource
	
	manifest {
		from serverManifest
	}
}


/************************************************************
 * Configure API javadoc
 */

javadoc {
    include "com/forgeessentials/api/**"
    classpath = sourceSets.main.compileClasspath + sourceSets.main.output
    options.addBooleanOption("Xdoclint:reference,accessibility,html", true) // excluded: syntax, missing
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = "javadoc"
    appendix = project.minecraft.version

    from javadoc.destinationDir

    manifest { from sharedManifest }
}

// Javadoc task for generating tsd - does not work yet
task tsd(type: Javadoc) {
    dependsOn "classes"
    source = fileTree(dir: 'src/main/java/com/forgeessentials/jscripting/fewrapper', include: 'ScriptExtensionRoot.java')
    classpath = project.sourceSets.main.compileClasspath

    options.doclet = "com.forgeessentials.jscripting.TsdGenerator"
    options.docletpath = [file("build/classes/main")]
    options.addStringOption("sourcepath", "src/main/java")
    options.addStringOption("subpackages", "com.forgeessentials.jscripting.fewrapper")
    options.addStringOption("out", "jscripting/fe.d.ts")
    options.addStringOption("header", "src/main/resources/com/forgeessentials/jscripting/fe_header.d.ts")
    options.addStringOption("interface", "com.forgeessentials.jscripting.fewrapper.fe.JsFEServer")
    options.addStringOption("static", "com.forgeessentials.jscripting.fewrapper.fe.JsPermissions")
}

reobf {
    clientJar {
        classpath = sourceSets.main.compileClasspath
    }
}

/************************************************************
 * Others
 */

sonarqube {
    properties {
        properties['sonar.projectKey'] = "com.forgeessentials:forgeessentials"
        properties['sonar.projectName'] = project.name
        properties['sonar.projectVersion'] = project.version
    }
}

// Add default artifacts for task "build"
artifacts {
    //archives deobfJar
    archives clientJar
}

task wrapper(type: Wrapper) {
    gradleVersion = "3.5"
}

/************************************************************
 * Configure maven publishing
 */

apply plugin: "maven-publish"

publishing {
    //tasks.publish.dependsOn "deobfJar"

    publications {
        mavenJava(MavenPublication) {
            groupId "com.forgeessentials"
            artifactId "forgeessentials"
            version baseVersion + "-SNAPSHOT"
            if (System.getenv("PUBLISH_RELEASE"))
                version baseVersion

            artifact deobfJar
            //artifact sourceJar
            artifact javadocJar

            pom.withXml {
                def dependenciesNode = asNode().appendNode("dependencies")
                def allDeps = configurations.serverLib.allDependencies +
                        configurations.shade.allDependencies
                allDeps.each {
                    def dependencyNode = dependenciesNode.appendNode("dependency")
                    dependencyNode.appendNode("groupId", it.group)
                    dependencyNode.appendNode("artifactId", it.name)
                    dependencyNode.appendNode("version", it.version)
                    //if (it.group == "com.sk89q.worldedit") // Hack to get classifier for worldedit attached (bug https://issues.gradle.org/browse/GRADLE-3030)
                    //dependencyNode.appendNode("classifier", "dev")
                }
            }
        }
    }

    repositories {
        if (project.hasProperty("forgemaven_user") && project.hasProperty("forgemaven_password")) {
            maven {
                credentials {
                    username project.forgemaven_user
                    password project.forgemaven_password
                }
                url "http://files.minecraftforge.net/maven/manage/upload"
            }
        } else {
            maven { url "file://${project.projectDir}/build/repo" }
        }
    }
}

task publishAndClean(type: Delete, dependsOn: "publish") {
    delete javadocJar, sourceJar
}
