// Build repositories
buildscript {
	repositories {
		maven {
			name = "forge"
			url = "http://files.minecraftforge.net/maven"
		}
		maven {
			name = "sonatype"
			url = "https://oss.sonatype.org/content/repositories/releases/"
		}
        maven {
            name = "sponge"
            url = "http://repo.spongepowered.org/maven/"
        }
		mavenCentral()
		mavenLocal()
		maven {
			name = "sonatype"
			url = "https://oss.sonatype.org/content/repositories/snapshots/"
		}
		jcenter()

	}
	dependencies {
		classpath "net.minecraftforge.gradle:ForgeGradle:2.1-SNAPSHOT"
		classpath "org.jfrog.buildinfo:build-info-extractor-gradle:3.0.1"
		classpath "org.ajoberstar:gradle-git:0.12.0"
        classpath 'org.spongepowered:mixingradle:0.4-SNAPSHOT'
	}

}

// Set up FE required repositories
repositories {
	maven {
		name = "sk89q"
		url = "http://maven.sk89q.com/repo/"
	}
	maven {
		name = "sponge"
		url = "http://repo.spongepowered.org/maven/"
	}
}

apply plugin: 'net.minecraftforge.gradle.forge'
apply plugin: 'org.spongepowered.mixin'

/************************************************************
 * General configuration
 */

// Get buildNumber from environment variable
ext.buildNumber = "0"
if (System.getenv("BUILD_NUMBER") != null) {
	buildNumber = System.getenv("BUILD_NUMBER")

}

// Get commit hash
import org.ajoberstar.grgit.Grgit
def repo = Grgit.open(project.file("."))
ext.gitCommitHash = repo.log().find().abbreviatedId

// Set build properties
ext.baseVersion = "1.8.5"
version = baseVersion + "." + buildNumber
group = "com.forgeessentials"
archivesBaseName = "forgeessentials"
sourceCompatibility = 1.8
targetCompatibility = 1.8

// Set up forge options
minecraft {
	version = "1.8.9-11.15.1.1722"
	runDir = "rundir"
	
	mappings = "snapshot_20160115"

	replaceIn "src/utils/java/com/forgeessentials/commons/BuildInfo.java"
	replace "_VERSION_", project.version
}

// Configure shared manifest
ext.sharedManifest = manifest {
	attributes (
		"BuildID": gitCommitHash,
		"BuildNumber": buildNumber,
		"FMLCorePluginContainsFMLMod": "true",
		"ForceLoadAsMod": "true",
        "MixinCompatibilityLevel": "JAVA_7",
	)
}

ext.serverManifest = manifest {
	from sharedManifest
	attributes (
		"TweakClass": "com.forgeessentials.core.preloader.FELaunchHandler",
		"TweakOrder": "0",
		"FMLCorePlugin": "com.forgeessentials.core.preloader.FELoadingPlugin",
        "MixinConfigs": "mixins.forgeessentials.json",
		"FMLAT": "forgeessentials_at.cfg",
	)
}

/************************************************************
 * Dependency configuration
 */

// Create dependency configurations
configurations {
	includeMod
	shade
	shadeClient
	serverLib
	buildDep
	compile.extendsFrom buildDep, shade, shadeClient, serverLib
}

// Configure dependencies (build-only, shaded and packed libraries)
dependencies {
	// IRC
	serverLib("org.pircbotx:pircbotx:2.0.1") {
        // these are all packaged with the minecraft server jar
        exclude module: 'guava'
        exclude module: 'commons-lang3'
        exclude module: 'commons-codec'
    }
	
	// Database libraries
	serverLib "com.h2database:h2:1.3.175"
	serverLib "mysql:mysql-connector-java:5.1.22"
	serverLib "org.hibernate:hibernate-entitymanager:4.3.7.Final"
	buildDep "org.hibernate:hibernate-jpamodelgen:4.3.7.Final"
	/* serverLib "org.eclipse.persistence:eclipselink:2.6.0" */
	
	// WorldEdit
    //buildDep group: "com.sk89q.worldedit", name: "worldedit-forge-1.8.9", version: "6.1.1-SNAPSHOT", changing: true
    buildDep "com.sk89q.worldedit:worldedit-core:6.1.1-SNAPSHOT"
    buildDep "com.sk89q.worldedit:worldedit-forge-mc1.8.9:6.1.1:dev"
	includeMod files('lib/worldedit-forge-mc1.8.9-6.1.1-SNAPSHOT-dist.jar')

	//buildDep "org.spongepowered:spongeforge:3.1.0-BETA-1046:deobf"
	buildDep 'org.spongepowered:spongeapi:3.0.0'

	// Shade Mixin library
	shade (group: "org.spongepowered", name: "mixin", version: "0.5.10-SNAPSHOT", changing: true) {
		exclude group: 'org.ow2.asm', module: 'asm-tree'
	}
	shadeClient (group: "org.spongepowered", name: "mixin", version: "0.5.10-SNAPSHOT", changing: true) {
		exclude group: 'org.ow2.asm', module: 'asm-tree'
	}
}

/************************************************************
 * Configure source sets (e.g., src/main)
 */

sourceSets {
    def deps = [
		configurations.forgeGradleMcDeps,
		configurations.forgeGradleMc,
		configurations.provided
	]
	utils {
		compileClasspath = files(configurations.compile, sourceSets.api.output)
		compileClasspath += files deps
	}
	main {
		compileClasspath = files(configurations.compile, sourceSets.api.output, sourceSets.utils.output)
		compileClasspath += files deps
	}
	client {
		compileClasspath = files(configurations.compile, sourceSets.api.output, sourceSets.utils.output)
		compileClasspath += files deps
	}
}

// Configure server resource processing
project.processResources {
	from (sourceSets.main.resources.srcDirs) {
		include "mcmod.info"
		expand (
			"version": project.version, 
			"mcversion": project.minecraft.version,
		)
	}
}

// Configure client resource processing
project.processClientResources {
	from (sourceSets.client.resources.srcDirs) {
		include "mcmod.info"
		expand (
			"version": project.version, 
			"mcversion": project.minecraft.version,
		)
	}
}

/************************************************************
 * Configure server jar (default)
 */

// Pack libraries as zip file to include them in the jar file
task serverLibArchive(type: Zip) {
	archiveName = "libraries.zip"
	destinationDir = jar.destinationDir

	from (configurations.serverLib.copyRecursive()) { into("ForgeEssentials/lib") }
	from (configurations.includeMod) { into("mods") }
}

jar.doLast {
	delete (serverLibArchive.archivePath)
}

// Configure server jar (default)
jar {
	dependsOn "serverLibArchive"
	classifier = "server"
	appendix = minecraft.version
	
	from sourceSets.main.output
	from sourceSets.utils.output
	from fileTree(serverLibArchive.archivePath)
	configurations.shade.copyRecursive().setTransitive(false).each { artifact ->
		from (zipTree(artifact))
	}

	manifest {
		from serverManifest
	}
}

/************************************************************
 * Configure client jar
 */

task clientJar (dependsOn: "clientClasses", type: Jar) {
	classifier = "client"
	appendix = minecraft.version
	
	from sourceSets.client.output
	from sourceSets.utils.output
	configurations.shadeClient.copyRecursive().setTransitive(false).each { artifact ->
		from (zipTree(artifact))
	}
	
	manifest {
		from sharedManifest
		attributes (
			"MixinConfigs": "mixins.forgeessentials.client.json",
            "TweakClass": "org.spongepowered.asm.launch.MixinTweaker",
		)
	}
}

mixin {
    add sourceSets.main, "mixins.forgeessentials.refmap.json"
    add sourceSets.client, "mixins.forgeessentials.client.refmap.json"
}

/************************************************************
 * Deobfuscated server jar
 * Dependency name for maven = com.forgeessentials:forgeessentials:<version>:

task deobfJar(dependsOn: "classes", type: Jar) {
	classifier = "dev"
	appendix = minecraft.version
	
	from sourceSets.main.output
	from sourceSets.utils.output
	
	from (sourceSets.main.java) {
		into ("src/")
	}

	manifest {
		from serverManifest
	}
}
task sourceJar(type: Jar) {
	classifier = "sources"
	appendix = minecraft.version
	
	from sourceSets.main.allSource
	
	manifest {
		from serverManifest
	}
}
*/

/************************************************************
 * Configure API javadoc
 */

javadoc {
	include "com/forgeessentials/api/**"
	classpath = sourceSets.main.compileClasspath + sourceSets.main.output
	options.addBooleanOption("Xdoclint:reference,accessibility,html", true) // excluded: syntax, missing
}

task javadocJar(type: Jar, dependsOn: javadoc) {
	classifier = "javadoc"
	appendix = project.minecraft.version
	
	from javadoc.destinationDir
	
	manifest { from sharedManifest }
}

/************************************************************
 * Configure reobfuscation
 *

def mixinSrg = "${tasks.reobf.temporaryDir}" + File.separator + "mixins.srg"
def mixinClientSrg = "${tasks.reobf.temporaryDir}" + File.separator + "mixinsClient.srg"
afterEvaluate {
	tasks.compileJava.options.compilerArgs += ["-AreobfSrgFile=${tasks.reobf.srg}", "-AoutSrgFile=${mixinSrg}", "-AoutRefMapFile=${serverRefMap}"]
	tasks.compileClientJava.options.compilerArgs += ["-AreobfSrgFile=${tasks.reobf.srg}", "-AoutSrgFile=${mixinClientSrg}", "-AoutRefMapFile=${clientRefMap}"]
}
*/

reobf {
    clientJar {
        classpath = sourceSets.main.compileClasspath
    }
}

/************************************************************
 * Others
 */

// Add default artifacts for task "build"
artifacts {
	//archives deobfJar
	archives clientJar
}

task wrapper(type: Wrapper) {
	gradleVersion = "2.10"
}

/************************************************************
 * Configure maven publishing
 */

apply plugin: "maven-publish"

publishing {
	//tasks.publish.dependsOn "deobfJar"

	publications {
		mavenJava (MavenPublication) {
			groupId "com.forgeessentials"
			artifactId "forgeessentials"
			version baseVersion + "-SNAPSHOT"
			if (System.getenv("PUBLISH_RELEASE"))
				version baseVersion

			//artifact deobfJar
			//artifact sourceJar
			artifact javadocJar

			pom.withXml {
				def dependenciesNode = asNode().appendNode("dependencies")
				def allDeps = configurations.buildDep.allDependencies + 
					configurations.serverLib.allDependencies + 
					configurations.shade.allDependencies
				allDeps.each {
					def dependencyNode = dependenciesNode.appendNode("dependency")
					dependencyNode.appendNode("groupId", it.group)
					dependencyNode.appendNode("artifactId", it.name)
					dependencyNode.appendNode("version", it.version)
					if (it.group == "com.sk89q.worldedit") // Hack to get classifier for worldedit attached (bug https://issues.gradle.org/browse/GRADLE-3030)
						dependencyNode.appendNode("classifier", "dev")
				}
			}
		}
	}

	repositories {
		if (project.hasProperty("forgemaven_user") && project.hasProperty("forgemaven_password")) {
			maven {
				credentials {
					username project.forgemaven_user
					password project.forgemaven_password
				}
				url "http://files.minecraftforge.net/maven/manage/upload"
			}
		} else {
			maven { url "file://${project.projectDir}/build/repo" }
		}
	}
}

task publishAndClean(type: Delete, dependsOn: "publish") {
    delete javadocJar, sourceJar
}
